# Generated by Django 4.2.8 on 2024-02-08 14:06

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import utils.custom_fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("tokens", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="BannedWords",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("chat_id", models.CharField(max_length=15, null=True, unique=True, verbose_name="Group ID")),
                ("words", utils.custom_fields.ListField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LinksException",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("chat_id", models.CharField(max_length=15, null=True, unique=True, verbose_name="Group ID")),
                ("links", utils.custom_fields.ListField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TelegramGroup",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("chat_id", models.CharField(max_length=15, null=True, unique=True, verbose_name="Group ID")),
                ("group_name", models.CharField(max_length=255, null=True, unique=True, verbose_name="Group Name")),
                ("subscribed", models.BooleanField(default=False)),
                ("about", models.TextField(blank=True, null=True)),
                ("welcome_message", models.TextField(blank=True, null=True)),
                ("goodbye_message", models.TextField(blank=True, null=True)),
                ("max_warnings", models.IntegerField(default=3)),
                ("mute_duration", models.IntegerField(default=1)),
                ("ban_duration", models.IntegerField(default=7)),
                ("max_message_length", models.IntegerField(default=300)),
                ("website", models.URLField(null=True)),
                ("support", models.URLField(null=True)),
                ("but_token_link", models.URLField(null=True)),
                ("allow_links", models.BooleanField(default=False)),
                ("must_have_username", models.BooleanField(default=True)),
                ("block_porn", models.BooleanField(default=True)),
                ("allow_hash", models.BooleanField(default=False)),
                ("allow_mention", models.BooleanField(default=False)),
                ("enable_captcha", models.BooleanField(default=False)),
                ("unverified_user_duration", models.IntegerField(default=7)),
                ("watch_for_spam", models.BooleanField(default=False)),
                ("watch_length", models.BooleanField(default=True)),
                ("prevent_flooding", models.BooleanField(default=False)),
                ("delete_messages", models.BooleanField(default=True)),
                ("offenders", utils.custom_fields.ListField()),
                (
                    "buy_token_name",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="buy_token_name",
                        to="tokens.tokens",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TelegramGroupCaptcha",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("group_id", models.CharField(blank=True, max_length=15, null=True)),
                ("user_id", models.IntegerField(unique=True)),
                ("captcha_code", models.IntegerField(unique=True)),
                ("expires", models.DateTimeField(null=True)),
                ("used", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TelegramGroupMediaActions",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("images", models.IntegerField(default=0)),
                ("videos", models.IntegerField(default=0)),
                ("animation", models.IntegerField(default=0)),
                ("audio", models.IntegerField(default=0)),
                ("sticker", models.IntegerField(default=0)),
                ("documents", models.IntegerField(default=0)),
                (
                    "group",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="media_actions",
                        to="users.telegramgroup",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TelegramGroupFlooding",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("messages_before_block", models.IntegerField(default=5)),
                ("repeats_timeframe", models.IntegerField(default=3)),
                ("ban", models.BooleanField(default=True)),
                ("kick", models.BooleanField(default=False)),
                ("mute", models.BooleanField(default=False)),
                (
                    "group",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="flood_settings",
                        to="users.telegramgroup",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GroupPinnedMessages",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("pinned_message_id", models.IntegerField(unique=True)),
                ("pinned_message_text", models.TextField()),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pinned_group",
                        to="users.telegramgroup",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GroupOffenders",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("user_id", models.CharField(max_length=15, null=True, unique=True, verbose_name="User ID")),
                ("warned_times", models.IntegerField(default=3)),
                ("start_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("end_date", models.DateTimeField(null=True)),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="offender_group",
                        to="users.telegramgroup",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GroupAdmins",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("user_id", models.CharField(max_length=15, null=True, unique=True, verbose_name="User ID")),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("MODERATOR", "MODERATOR"),
                            ("ENFORCER", "ENFORCER"),
                            ("SUPERADMIN", "SUPERADMIN"),
                            ("SUPPORT", "SUPPORT"),
                        ],
                        default="SUPERADMIN",
                        max_length=25,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admin_group",
                        to="users.telegramgroup",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("name", models.CharField(blank=True, max_length=255, verbose_name="Name of User")),
                ("chat_id", models.CharField(max_length=15, null=True, unique=True, verbose_name="Chat ID")),
                ("user_id", models.CharField(max_length=15, null=True, unique=True, verbose_name="User ID")),
                ("subscribed", models.BooleanField(default=False, verbose_name="Subscribed")),
                ("violated", models.BooleanField(default=False, verbose_name="Violated")),
                (
                    "chosen_language",
                    models.CharField(default="English", max_length=20, verbose_name="Chosen Language"),
                ),
                ("groups", models.ManyToManyField(related_name="groups", to="users.telegramgroup")),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
